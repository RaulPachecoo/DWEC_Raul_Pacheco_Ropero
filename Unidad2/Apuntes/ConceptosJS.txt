//VARIABLES

let fechaEntrada;
let numeroMaximo = 500;
let numeroTotal = 1000;
let numeroMinimo = 5;
let cadena1 = "un texto"; 
let cadena2 = cadena1; 
cadena2 = "adios";
let registrado = true; 
let usuario = {
	nombre: "maximo", 
  edad : 25
}; 

let asignaturas = ["DEWC", "DIW", "DWES", "ED", "EIE"]; 
let asignaturas2 = [
  DWEC = ["tema1", "tema2"],
  DIW = ["tema1", "tema2"]
  
];

let nuevaCadena = String(numeroMinimo); 

console.log(`La suma de ${numeroMaximo} y ${numeroTotal} es ${numeroMaximo + numeroTotal}`);

console.log(usuario.nombre); 
console.log(asignaturas2[0][0]); 

console.log(typeof(cadena2), typeof(asignaturas), typeof(usuario)); 

console.log(nuevaCadena, typeof(nuevaCadena), numeroMinimo+Number(nuevaCadena)); 


----------------------------------------------------------------------------------------------------------
//OPERADORES

let a=b=c=d=n=5; 

let c=4 (a-5); 
console.log(n++); 
console.log (n); 

console.log (0==false); 
console.log(""===false); 

let a = true; 
let b = false; 
let c = 3; 
let d = 4; 

console.log (a || b); 
(c>0 && d==3) || console.log ("hola"); 

console.log(a && b); 

(c>0 && d==3) && console.log ("adios");


console.log(!a); 
(!(c>0 && d==3) || b) && console.log ("codigo del segundo and"); 


//nulish
let valor = 0; 

console.log(valor || 100); 
console.log(valor ?? 100); 



/*
console
prompt
alert
*/
/*
if (confirm("aa")){
console.log("dentro del if")
}
*/

--------------------------------------------------------------------------------------------------------------------------
// CONDICIONALES

let a = 5,
	b = 10; 
  
if (a>5 && b==10){
	console.log("condicion 1"); 
}else{
	if(1){
  	console.log("condicion 2"); 
  }else{
  	console.log("otra"); 
  }
}


let anyos = prompt("Dime tu edad"); 
let mayoria_edad = (anyos>=18); 
let fechoria = confirm("¿Has cometido alguna fechoría?"); 

if(mayoria_edad && fechoria){
	let carcel = true; 
	console.log("Te vas a pasar algún tiempo en la sombra"); 
}else{
	if(fechoria){
  	let reformatorio = true; 
    console.log ("Te vas al correccioal de menores"); 
  }else{
  console.log("Sigue tu vida"); 
  }
 
}



(mayoria_edad && fechoria) ? console.log("Te vas a pasar un tiempo a la sombra") : (fechoria) ? console.log("Te vas al correccional de menores") : console.log("Sigue tu vida");  

//SWITCH

let calificacion = Number(prompt("¿Qué nota has sacado?"));
switch (calificacion) {
  case 5:
    console.log("Tienes que poner empeño");
    break;
  case 6:
    console.log("Tienes que poner empeño");
    break;
  case 7:
    console.log("Tienes que poner empeño");
    break;
  case 8:
    console.log("Tienes que poner empeño");
    break;
  case 9:
    console.log("Tienes que poner empeño");
    break;
  case 10:
    console.log("Enhorabuena");
    break;
  default:
    console.log("Estás suspenso");
}


--------------------------------------------------------------------------------------------------------------------------------------
// LOOPS

let i = 0;


while(i<10){
	console.log(i++); 
}




do{
	console.log(i--); 
}while(i>0); 



let suma = 0; 
while(1){
	suma++;
  if(suma==5) break; 
}



for(let i=0; i<10; i++){
	if(i%2 == 0) continue;
  console.log(i); 
}



for(let i = 0; i<10; i++){
	console.log("i vale " + i); 
}


-----------------------------------------------------------------------------------------------------------------------------

//MATRICES

let matriz = ["DWEC", "DIW", "DWES", "ED"]; 

let objeto = {
	nombre: "pepe",
  dni: 1234
}; 

for(let i = 0; i<matriz.length; i++){
	console.log(matriz[i]); 
}

for(let elemento of matriz){
	console.log(elemento); 
}

for(let elemento in objeto){
	console.log(elemento); 
}

for(let i=0; i<Object.keys(objeto).length; i++){
	console.log(objeto); 
}


for(let i=0; i<Object.keys(objeto).length; i++){
	let elemento = Object.keys(objeto)[i]; 
	console.log(objeto[elemento]); 
}


---------------------------------------------------------------------------------------------------------------

// FUNCIONES

/*
let mensaje1 = "mensaje 1 fuera"; 
function muestraMensaje(){
	let mensaje1 = "mensaje 1 dentro de la función"; 
  console.log(mensaje1); 
  if(1){
    let mensaje1 = "mensaje 1 dentro del if"; 
    console.log(mensaje1); 
  }
}

console.log(mensaje1); 
muestraMensaje(); 


let texto = "hola"; 
function saluda (momento, aux = tratamiento()){
	switch (momento){
  	case "tarde":
    	console.log("buenas tardes " + aux); 
      break; 
		case "mañana":
    	console.log("buenos días "+ aux); 
      break; 
		default:
    	console.log("buenas noches " + aux);
	}
}

function tratamiento(){
	return "señor"; 
}

saluda("tarde");


let nombre = "pepe";
let acceso = "operario";
let nombre2 = "manolo"; 
let acceso2 = "administrador"; 

function compruebaAcceso(usuario){
	if(usuario == nombre){
  		imprimeMensaje("acceso"); 
  }else{
  		imprimeMensaje("acceso2"); 
  }
}

function imprimeMensaje(nivel){
	if(nivel == "acceso"){
    console.log("El usuario tiene acceso de " + acceso); 
  }else{
  	console.log("El usuario tiene acceso de " + acceso2); 
  }
}

compruebaAcceso(nombre2); 



let edad = 17; 

function compruebaEdad(edad){
	return(edad>18); 
}

console.log(compruebaEdad(edad)); 



let operacionSuma = function(a,b){
	return(a+b); 
}

let suma1 = operacionSuma(3,3); 

console.log(suma1); 


function saluda(quien){
	if(quien){
  	console.log("hola " + 	quien); 
  }else{
  	saluda("invitado"); 
  }
}

saluda("pepe"); 


saluda("pepe"); 

function saluda(nombre){
	console.log("hola " + nombre); 
}


despedida("manolo");
let despedida = function(nombre){
	console.log("adios " + nombre); 
}




function fSumar(a, b){
	return (a+b); 
}

let sumar = function(a,b){
	return(a+b); 
}

let sumarFlecha =(a,b)=>(a+b); 

sumarFlecha(3,2); 
let despidete=()=>console.log("adios"); 
despidete(); 

let edad; 
let carcel = (edad<=18) ?
	() => console.log("vas preso"):
  () => console.log("no vas preso"); 
  
carcel(19); 




let resta= (a,b)=>{
	console.log("restando"); 
  return (a-b); 
}

console.log(resta(5,2)); 




// CALLBACK FUNCTIONS

function preguntar(pregunta, si, no){
	if(confirm(pregunta)){
  	si(); 
  } else{
  	no(); 
  }
}

function afirmativo(){
	console.log("Aceptaste"); 
}

function negativo(){
	console.log("Rechazaste"); 
}

preguntar("¿Aceptas las condiciones?", afirmativo, negativo); 



function calculadora(a,b,operacion){
	return(operacion(a,b)); 
}

let suma = (a,b) => (a+b); 
let resta = (a,b) => (a-b); 

console.log(calculadora(2,3,suma));
console.log(calculadora(100,2,(a,b)=>(a/b)));

*/


------------------------------------------------------------------------------------------------------------------------------------------

// RECURSIVIDAD

function potencia(x, n){
	//return (x**n);
  	let resultado = 1; 
  	for(let i = 0; i<n; i++){
      resultado *= x;  
    }
  	return resultado; 
}

console.log(potencia(2,3)); 

function potenciaRecursiva(x, n){
  if(n == 1){
    return x; 
  }else{
    return (x * potenciaRecursiva(x, n-1)); 
  }
}

console.log(potenciaRecursiva(2, 3)); 

---------------------------------------------------------------------------------------------------------------------------------
// REST PARAMETERS

function sumarTodo(...numeros){
  let acumulado = 0; 
  for(let num of numeros){
    acumulado += num; 
  }
  return acumulado; 
}

console.log(sumarTodo(1, 2, 7, 109, 28, 99, 100, 23, 67)); 


function concatena(...palabras){
  let cocatenacion = ""; 
  for(let palabra of palabras){
    cocatenacion += palabra; 
  }
  return cocatenacion; 
}

console.log(concatena("hola", "adios", "muy buenas")); 


function restaTotal(numeroInicial, ...numeros){
  for(let n of numeros){
    numeroInicial -= n; 
  }
  return numeroInicial; 
}

function restaTotalRecursiva(numeroInicial, ...numeros){
  if(numeros.length == 1){
    return (numeroInicial -= numeros[0]); 
  }else{
    numeroInicial -= numeros.pop(); 
    return (restaTotalRecursiva(numeroInicial,...numeros)); 
  }
}
let numeroInicial = 100; 
console.log(restaTotal(numeroInicial, 20, 10, 5)); 
console.log(restaTotalRecursiva(numeroInicial, 20, 10, 5)); 


/*
function resta(){
  let numeroInicial = arguments[0];
  let numeros = []; 
  for(let i = 1; i<arguments.length; i++){
    numeros.push(arguments[i]); 
  }
    
  for(let n of numeros){
    numeroInicial -= n; 
  }
  return numeroInicial;
  
}
*/
function resta(){
  let matrizArgumentos = Array.from(arguments); 
  let total = matrizArgumentos[0]; 
  for(let i = 1; i<matrizArgumentos.length; i++){
    total -= matrizArgumentos[i]; 
  }
  return total; 
  
}
console.log(resta(100, 20, 10, 5)); 


--------------------------------------------------------------------------------------------------------------------------------------
// NESTED FUNCTIONS

function externa(){
  	console.log("Exerna"); 
  	function interna(){
      console.log("Interna"); 
    }
  	interna(); 
}
externa(); 



(function () {console.log("Hola alumnos"); }) (); 

(function(quien){
  console.log(`soy ${quien}`); 
}) ("Pepe"); 

----------------------------------------------------------------------------------------------------------------------------------------
/* scope
	- global
    - function
    - block

closure
*/

let nombre = "manolo"; 
function saludar(){
	let nombre = "pepe"; 
	return function(){
     	console.log(nombre);  
    }
}
let nombre = "felipe"; 
saludar()(); 



-----------------------------------------------------------------------------------------------------------------------------------------

// MATRICES

let comida = ["espaguetis", "macarrones", "pizza"]; 
let m1 = [true, 25, "mangos", function(){console.log("hola");}]; 
let mb1 = [ 
  ["macarrones", "pizza", "espaguetis"],
  ["tortilla", "kebab", "montadito"],
  [true, false]
]; 

let mb2 = [
  {nombre:"pepe", edad:25},
  {nombre: "lucia", edad: 31},
  {nombre: "felipe", edad: 19}
]; 

let m2 = []; 
let m3 = new Array(); 
let m4 = new Array(1, 2, 3); 
let m5 = new Array(5); 
let m6 = new Array(
  	new Array(1,2,3),
  	new Array(true, false),
  	new Array(()=>"hola", ()=> "adios")
); 

--------------------------------------------------------------------------------------------------------------------
// accesing

console.log(comida[0], mb1[0][1], mb2[0].edad); 
console.log(comida[comida.length-1], comida[comida.at(-1)]); 

// inserting elements
let m6 = [1,2,3]; 
let m7 = [...m6, 4, 5, 6]; 
console.log(m7); 

// by using splice method

m6.splice(2, 1, 4); 
console.log(m6); 


// by using push
m6.push(5); 
console.log(m6); 

m6.push(9); 
console.log(m6); 

// by using unshift

m6.unshift(10); 

console.log(m6); 

-----------------------------------------------------------------------------------
// removing elements
// pop

m6.pop(); 
console.log(m6); 

//shift

console.log(m6.shift(), m6); 

// stack

for(let i = 10; i<15; i++){
  m6.push(i); 
}

console.log(m6); 
m6.pop(); 
console.log(m6); 
m6.pop(); 
console.log(m6); 


// qeue -> FIFO

for(let i = 10; i<15; i++){
  m6.unshift(i); 
}

console.log(m6); 
m6.pop(); 
console.log(m6); 

-------------------------------------------------------------------------------------------------------------
// iterating

// foreach
// m6.forEach(elemento, indice, matriz)
m6.forEach((elemento, indice, matriz) => {
  console.log("El elemento " + elemento + " está en la posición " + indice);
});


let mb1 = [ 
  ["macarrones", "pizza", "espaguetis"],
  ["tortilla", "kebab", "montadito"],
  [true, false]
]; 

mb1.forEach((fila, indiceFila) => {
  fila.forEach((elemento, indiceElemento) => {
    console.log("El elemento " + elemento + " está en la fila " + indiceFila + " y en la posición " + indiceElemento);
  });
});


let mb1 = [ 
  ["macarrones", "pizza", "espaguetis"],
  ["tortilla", "kebab", "montadito"],
  [true, false]
]; 

for(let fila of mb1){
  for(let elemento of fila){
   	console.log(elemento);
  }
}

-------------------------------------------------------------------------------------------------------
// get information about an array

let arr1 = [1,2,3]; 
console.log(typeof(arr1)); 
console.log(Array.isArray(arr1)); 


let frutas = ["mango", "aguacate", "pera", "chirimoya", "manzana", "pera"]; 

//console.log(frutas.indexOf("pera"), frutas[4], frutas.includes("manzana"), frutas.lastIndexOf("pera")); 


// extract, insert and replace elements in a array
// splice extracts

//let frutas2 = frutas.splice(1,3); 
//console.log(frutas, frutas2); 

/*frutas.splice(1,3,"naranja", "pomelo");
console.log(frutas); 
*/

//inserts
/*frutas.splice(3,0,"sandía", "melón"); 
console.log(frutas); */


//slice returns with no change at original array
/*let frutas2 = frutas.slice(1,3); 
console.log(frutas, frutas2);*/

let frutas2 = frutas.slice(-4,-1); 
console.log(frutas, frutas2); 

-----------------------------------------------------------------------------------------------------
//compare arrays

let arr1 = [1,[2,3]]; 
let arr2 = arr1;  
//let arr2 = [1,2,3]; 
let arr3 = [1,2,3]; 
const arr4 = [1, true, "hola", undefined, null, function(){return "hola"}];
const arr5 = [1, true, "hola", null, null, null];

console.log(JSON.stringify(arr4)); 
console.log(JSON.stringify(arr5)); 


/*
console.log(arr1 == arr2); 
arr2=[4,5,6]; 
console.log(arr1, arr2, arr1==arr3);
*/

console.log(arr1.toString() == arr3.toString());
console.log(JSON.stringify(arr1) == JSON.stringify(arr3)); 

---------------------------------------------------------------------------

//compare arrays

let arr1 = [1,2,3]; 
let arr2 = arr1;  
let arr3 = [1,2,3]; 
const arr4 = [1, true, "hola", undefined, null, function(){return "hola"}];
const arr5 = [1, true, "hola", null, null, null];
let iguales = true; 

if (arr4.length !== arr5.length) {
  iguales = false; 
} else {
  for (let i = 0; i < arr4.length; i++) {
    if (arr4[i] !== arr5[i]) {  
      iguales = false;
      break;  
    }
  }
}
console.log(iguales);

---------------------------------------------------------------------------------------
// locate elements 
// indexOf compares my using ===

let frutas = [
  {nombre: "manzana", variedad: "verde", existencias: 10},
  {nombre: "manzana", variedad: "golden", existencias: 10},
  {nombre: "pera", variedad:"conferencia", existencias: 3},
  {nombre: "pera", variedad:"blanquilla", existencias: 7},
  {nombre: "caqui", variedad: "persimon", existencias: 5},
]

console.log(frutas.findIndex(elemento => elemento.nombre == "manzana" && elemento.existencias >= 5 ));
console.log(frutas.findLastIndex(elemento => elemento.nombre == "manzana"));


console.log(frutas.find(elemento => elemento.nombre == "manzana" && elemento.existencias >= 5)); 

console.log(frutas.filter(elemento => elemento.existencias >= 5)); 


-----------------------------------------------------------------------------------------
// perform calculations

let mat1 = [1,2,3,4,5]; 

console.log(mat1.map(x => x*3), mat1); 

let frutas = [
  {nombre: "manzana", variedad: "verde", existencias: 3},
  {nombre: "manzana", variedad: "golden", existencias: 10},
  {nombre: "pera", variedad:"conferencia", existencias: 3},
  {nombre: "pera", variedad:"blanquilla", existencias: 7},
  {nombre: "caqui", variedad: "persimon", existencias: 5},
]

console.log(frutas.filter(elemento => elemento.existencias<5).map(elemento=>elemento.existencias+4))



let mat1 = [1,2,3,4,5,20,20,20]; 

console.log(mat1.map(x => x*3), mat1); 
console.log(mat1.reduce((total,actual)=>total+actual));
console.log(mat1.filter(elemento=>elemento>10).reduce((total, actual)=>total+actual)); 

--------------------------------------------------------------------------------------------------------
// concatenate elements

let razas = ["chiuaua", "pastor aleman", "fox terrier"]; 
console.log(razas.join(), razas); 

let cadena = "gato,perro,hurón,periquito"; 
console.log(cadena.split(",")); 

-----------------------------------------------------------------------------------------------------------------
// Converting

let mat1 = ["gato", "perro", "hurón", "serpiente"]; 

console.log(mat1.join()); 

----------------------------------------------------------------------------
// sorting

let mat2 = [4,25,17,1,41,2,29]; 
console.log(mat2.sort()); 
console.log(mat1.sort()); 
console.log(mat2.sort((a,b) => a-b)); 

let ordenaNumeros=(a,b)=>{
  return (a<b) ? 1 : (a==b ? 0 : 1); 
}

//console.log(mat2.sort(ordenaNumeros())); 

----------------------------------------------------------------------------
// reverse

console.log(mat2.reverse()); 

-----------------------------------------------------------------------------

// fill with values
let mat3 = new Array(10); 
mat3.fill(0); 
console.log(mat3); 

console.log(mat3.fill(-5, 1, 3)); 
console.log(mat3.fill(20,4)); 
console.log(mat3.fill(33, -3)); 

-------------------------------------------------------------------------------------------------------------------------------------
// unstructure

function imprimir(a,b,c){
  console.log(a,b,c); 
}

let mat1 = ["pepe", "jose", "maría"]; 
imprimir(...mat1); 

//2

const arr1 = [1,2,3,4]; 

const [num1, num2, ...resto] = arr1; 

console.log(num1, num2, resto); 

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

// Objects
// Create

let persona = {}; 
let persona2 = {
	nombre: "procopio", 
  	edad: 27
}; 
// Complex object
let persona3 = {
  	nombre: "apolinar",
  	edad: 44, 
  	saluda: function(){
      cnsole.log("hola"); 
    }, 
  	
  	despidete(texto){
      console.log(texto); 
    },
  	//pregunta:(texto)=>(console.log(texto)
}
  	
// With a constructor

function Perro(tipo, nombre){
  this.nombre = nombre; 
  this.tipo = tipo;
  this.ladrar = function(){
    console.log("guau"); 
  };
}

let miPerro = new Perro("foxterrier", "perico");

// Another
const {raza, ...otros} = {
  raza: "podenco",
  edad: 5,
  peso:15
}; 

// Factory function
// a function that returns a object
function construyeAnimal(nombre,edad){
  return{
    nombre: nombre,
    edad: edad
  }; 
}
let miAnimal = construyeAnimal("perico", 3); 
console.log(miAnimal); 

// another way of doing the same

let crearAnimal = (nombre,edad)=>(
	{nombre, edad}
); 

let miAnimal2 = crearAnimal("fufo", 5); 
console.log(miAnimal2); 

------------------------------------------------------------------------------------------------------------------
// Access object properties

// by using a dot
console.log(persona2.nombre); 
console.log(persona3.saluda()); 
console.log(persona2["nombre"]); 

let prop = prompt("a que propiedad quieres acceder"); 
console.log(persona2[prop]); 


-----------------------------------------------------------------------------------------------------------------------
// Defining new properties after the object is created
console.log(persona); 
persona.nombre = "hilario"; 
persona["direcciónCompleta"] = "calle pez, nº3"; 
console.log(persona); 

Object.defineProperty(persona, 'profesion',{
	value: "ascensorista",
	writable: false, // value can't be changed
   	enumerable: false, // can't be iterated
   	configurable: false // can't be removed
}); 

console.log(persona.profesion); 

persona.saluda = ()=>{console.log("buenos días")}; 
console.log(persona.saluda()); 
let diAdios = function(){
  console.log("hasta otra"); 
}
persona.despidete = diAdios; 
console.log(persona.despidete()); 

----------------------------------------------------------------------------------------------------------------------

 // Check if a property exists

console.log(persona.peso); 
console.log(Object.hasOwn(persona,"peso")); 
console.log("peso" in persona); 

---------------------------------------------------------------------------------------------------------------------
 
// Prevent objects from being changed

Object.freeze(persona); 
console.log(persona.profesion); 
persona.profesion = "practicante"; 
console.log(persona.profesion); 

-------------------------------------------------------------------------------------------------------------------------

// Delete property

persona.altura = 180; 
console.log(persona.altura); 
delete persona.altura; 
console.log(persona.altura); 
console.log(Object.hasOwn(persona, "altura")); 




Object.seal(persona); // It dosen't allow to extend or delete
console.log(persona.profesion); 
delete persona.altura; 


Object.preventExtensions(persona); // It doesn't allow to extend. 

persona.altura = 180; 


-----------------------------------------------------------------------------------------------------------------------

Object.defineProperty(persona, 'hablar',{
  value: function(texto){
    console.log(texto); 
  },
  writable: true, // value can't be changed
  enumerable: false, // can't be iterated
  configurable: false // can't be removed
}); 

--------------------------------------------------------------------------------------------------------------------------
// Iterator

let persona = {
	profesion: "papa",
  	nombre: "procopio",
  	saluda(texto){
      console.log(texto); 
    }
}; 

console.log(persona[Symbol.iterator]); 
// for .. in -> non iterables (object)
// for .. of -> iterables (arrays)
// comprobar for in con array

for(let elemento in persona){
  console.log(elemento, persona[elemento]); 
}

let valores = Object.values(persona); 
for(let i = 0; i<valores.length; i++){
  console.log(valores[i]); 


Object.values(persona).forEach(valor=>{
  console.log(valor); 
}); 


Object.keys(persona).forEach(valor=>{
  console.log(valor); 
}); 


Object.entries(persona).forEach(valor=>{
  console.log(valor); 
}); 


let coche = {
	marca: "Mercedes-Benz",
  	modelo: "C63",
  	matricula: "4111AX",
  	acelerar(velocidad){
      console.log("Voy a " + velocidad); 
    }
}; 




Object.values(coche).forEach(valor=>{
  console.log(valor); 
}); 

-------------------------------------------------------------------------------------------------------------
// Object Creation
// 1st way of creating objects: Literal object

/*const persona = {
  nombre: "procopio",
  edad: 30,
  habla(texto){
    console.log(texto); 
  }
};*/

// option 1: duplicate code
// option 2: object.assign
const persona = {
  habla(texto){
    console.log(texto); 
  }
};
const persona1 = Object.assign({}, persona); 
const persona2 = Object.assign({}, persona); 

persona1.habla("soy la persona 1"); 
persona1.nombre = "Urraca"; 
persona2.habla("soy la persona 2"); 
persona2.nombre = "Úrsula"; 
// inheritance
// problem: duplicates code in memory


// option3: object.create()

const persona = {
  // nested property
  direccion:{
    calle: "pez",
    numero: 3
  },
  habla(texto){
    console.log(texto); 
  }
};

const persona1 = Object.create(persona); 
const persona2 = Object.create(persona); 

persona1.habla("soy la persona 1"); 
persona1.nombre = "Urraca"; 
persona2.habla("soy la persona 2"); 
persona2.nombre = "Úrsula";
// Advantage over object.assign -> it allows sharing methods in memory. 
// Objects don´t have their own copy fo methods
// problem: nested properties are passed by reference


// 2nd way of creating objects
// factory function
const crearCoche = (marca, modelo) => {
  return{
    marca, 
    modelo,
    acelerar(){
      console.log("acelerando"); 
    }
  };
};

const coche1 = crearCoche("ford", "escort"); 
const coche2 = crearCoche("volkswagen", "golf"); 
//problem: it doesn't allow inheritance. Besides, methods are copied at every object


// 3rd way of creating objects
// constructor function

function Coche(marca, modelo){
  this.marca = marca;
  this.modelo = modelo;
  this.acelerar = function(){
    console.log(`soy ${this.marca} y estoy acelerando`); 
  };
};

const coche1 = new Coche("ford", "escort");
const coche2 = new Coche("volkswagen", "golf");
// problem: duplicates methods at every object

// prototype -> prototypical inheritance
function Coche(marca, modelo){
  this.marca = marca;
  this.modelo = modelo;
};
Coche.prototype.acelerar = function(){
  console.log(`soy ${this.marca} y estoy acelerando`); 
};
const coche1 = new Coche("ford", "escort");
const coche2 = new Coche("volkswagen", "golf");


// 4th way of creating objects

class Coche{
  constructor(marca, modelo){
    this.marca = marca;
  	this.modelo = modelo;
  };
  acelerar(){
    console.log(`soy ${this.marca} y estoy acelerando`); 
  };
}; 

const coche1 = new Coche("ford", "escort");
const coche2 = new Coche("volkswagen", "golf");


// create, assign
// hasOwnProperty, hasOwn, in
const objeto = {a:1}; 
console.log(objeto.hasOwnProperty('a'));// inherited from object

const objetoHeredado = Object.create(objeto); 
objetoHeredado.b = 2; 
Object.defineProperty(objetoHeredado, 'c', {
  value: 3,
  writable: false,
  enumerable: true,
  configurable: true
}); 

console.log(objetoHeredado.hasOwnProperty('c')); 

///////////////////
//ES13 ECMAScript 2022
console.log(Object.hasOwn(objetoHeredado, 'a')); 
console.log(Object.hasOwn(objetoHeredado, 'b')); 

console.log('a' in objetoHeredado); 

//defineProperty
function Persona(nombre,edad){
  this.nombre = nombre; 
  this.edad = edad; 
}

const persona1 = new Persona("Sisebuto", 30); 
Object.defineProperty(Persona.prototype, 'saludar', {
  value: function(){
    console.log("Hola soy " + this.nombre); 
  },
  writable: true,
  enumerable: false,
  configurable: false
}); 
persona1.saludar(); 

const persona2 = new Persona("olegario", 22);
persona2.saludar(); 


// copying nested properties

const persona = {
  nombre: "recaredo",
  profesion: "rey godo",
  medidas: {
    altura: 160,
    peso: 80
  }
}; 

// deep copy
let persona2 = structuredClone(persona); 
persona2.nombre = "recadera"; 
console.log(persona.nombre, persona2.nombre); 

persona2.medidas.altura = 190; 
console.log(persona.medidas.altura, persona2.medidas.altura);

// this 
function Persona(nombre, edad){
  this.nombre = nombre; 
  this.edad = edad; 
}; 

Persona.prototype.saludar=function(){
  console.log(`hola soy ${this.nombre}`); 
}; 
const persona1 = new Persona(); 
persona1.saludar(); 


function Producto(nombre, precio){
  this.nombre = nombre; 
  this.precio = precio; 
  this.descontar = function(porcentaje){
    const descuento = this.precio * (porcentaje/100); 
    console.log(this.precio - descuento)
  }; 
}
const producto1 = new Producto("zapatos", 120); 
producto1.descontar(20); 

// this is tricky to use with arrow functions
let persona = {
  nombre: "higinio",
  edad: 22
}; 
persona.saluda=()=>{
  console.log(`yo, ${this.nombre}, te saludo`); 
}
persona.despidete=function(){
  console.log(`yo, ${this.nombre}, me despido`); 
}

persona.despidete(); 
persona.saluda(); 

