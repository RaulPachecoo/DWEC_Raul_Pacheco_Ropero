(()=>{"use strict";const a=class{#a;#e;constructor(a){this.#a=a.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ IVXLCDMivxlcdm]+$/)?a:"Asignatura",this.#e={}}get nombre(){return this.#a}get calificaciones(){return this.#e}set nombre(a){if(!new RegExp(/^[A-Za-z0-9IVXLCDM\s]+$/).test(a))throw new Error("El nombre de la asignatura solo puede contener letras, números romanos y espacios.");this.#a=a.trim()}calcularPromedio(){const a=Object.values(this.#e).flat();return 0===a.length?0:a.reduce(((a,e)=>a+e),0)/a.length}agregarCalificacion(a,e){if(e<0||e>10)throw new Error("La calificación debe estar entre 0 y 10.");this.#e[a]||(this.#e[a]=[]),this.#e[a].push(e)}eliminarCalificacion(a){if(!this.#e[a])throw new Error(`No hay calificaciones registradas para el estudiante con ID ${a}.`);delete this.#e[a]}};class e{static contadorID=1;#t;#a;#r;#n;#i;#o;constructor(a,t,r){this.#t=e.contadorID++,this.#a=null!=a&&a.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ\s]+$/)?a:"Alumno",this.#r=!Number.isNaN(t)&&Number.isInteger(t)&&t>0?t:0,this.#n=r,this.#i=[],this.#o={}}get id(){return this.#t}get nombre(){return this.#a}get edad(){return this.#r}get asignaturas(){return this.#i}get matriculas(){return this.#o}get direccion(){return this.#n}matricularAsignatura(e){const t=(new Date).toLocaleDateString("es-ES");if(this.#o[e]){if("matriculado"===this.#o[e].estado)throw new Error(`El estudiante ya está matriculado en la asignatura ${e}.`);if(this.#o[e]={estado:"matriculado",fecha:t},!this.#i.some((a=>a.nombre===e))){const t=new a(e);this.#i.push(t)}}else{this.#o[e]={estado:"matriculado",fecha:t};const r=new a(e);this.#i.push(r),r.calificaciones[this.id]=[]}}desmatricularAsignatura(a){const e=(new Date).toLocaleDateString("es-ES");if(!this.#o[a])throw new Error(`El estudiante no está matriculado en la asignatura ${a}.`);if("desmatriculado"===this.#o[a].estado)throw new Error(`El estudiante ya está desmatriculado de la asignatura ${a}.`);this.#o[a]={estado:"desmatriculado",fecha:e}}calcularPromedio(){let a=0,e=0;for(let t=0;t<this.#i.length;t++){const r=this.#i[t].calificaciones[this.id];if(Array.isArray(r)&&r.length>0){let t=0;for(let a=0;a<r.length;a++)t+=r[a];a+=t/r.length,e++}}return 0===e?0:a/e}buscarAsignatura(a){const e=new RegExp(a,"i");return this.#i.filter((a=>e.test(a.nombre)))}}const t=e,r=class extends t{#s;#c;constructor(a,e,t,r,n){super(a,e,t),this.#s=r instanceof Date?r:new Date,this.#c=n||"Sin título"}get fechaGraduacion(){return this.#s}get titulo(){return this.#c}set fechaGraduacion(a){if(!(a instanceof Date))throw new Error("La fecha de graduación debe ser una instancia de Date.");this.#s=a}set titulo(a){if("string"!=typeof a||""===a.trim())throw new Error("El título debe ser una cadena de texto no vacía.");this.#c=a.trim()}calcularPromedio(){return super.calcularPromedio()+.5}toString(){return`Estudiante Graduado: ${this.nombre} (ID: ${this.id})\n            Edad: ${this.edad}\n            Dirección: ${this.direccion.toString()}\n            Título: ${this.#c}\n            Fecha de Graduación: ${this.#s.toLocaleDateString("es-ES")}`}},n=class{#l;#d;#u;#g;#m;#p;constructor(a,e,t,r,n,i){this.#l=a,this.#d=e,this.#u=t,this.#g=new String(r).match(/^[0-9]{5}$/)?r:"00000",this.#m=n,this.#p=i}get calle(){return this.#l}get numero(){return this.#d}get piso(){return this.#u}get codigoPostal(){return this.#g}get provincia(){return this.#m}get localidad(){return this.#p}toString(){return`Calle ${this.#l} ${this.#d}, Piso ${this.#u}, ${this.#g} - ${this.#m}, ${this.#p}`}},i=class{#h;constructor(){this.#h=[]}get estudiantes(){return this.#h}agregarEstudiante(a){if(this.#h.find((e=>e.id===a.id)))throw new Error(`El estudiante con ID ${a.id} ya existe.`);this.#h.push(a)}eliminarEstudiante(a){if(!this.#h.find((e=>e.id===a)))throw new Error(`El estudiante con ID ${a} no se encuentra en la lista.`);this.#h=this.#h.filter((e=>e.id!==a))}buscarEstudiante(a){const e=new RegExp(a,"i");return this.#h.filter((a=>e.test(a.nombre)))}buscarEstudiantePorID(a){return this.#h.find((e=>e.id===a))}calcularPromedioGeneral(){if(0===this.#h.length)return null;let a=0;for(let e=0;e<this.#h.length;e++)a+=this.#h[e].calcularPromedio();return a/this.#h.length}generarReporte(){let a="";return this.#h.forEach((e=>{const t=e.calcularPromedio();let n="";e.asignaturas.forEach((a=>{const e=a.calcularPromedio();n+=`  - ${a.nombre}: Promedio ${e.toFixed(2)}\n`})),a+=e instanceof r?`Estudiante Graduado: ${e.nombre} (ID: ${e.id})\n                    Edad: ${e.edad}\n                    Dirección: ${e.direccion.toString()}\n                    Título: ${e.titulo}\n                    Fecha de Graduación: ${e.fechaGraduacion.toLocaleDateString("es-ES")}\n                    Promedio General del Estudiante: ${t.toFixed(2)}\n                    Asignaturas: \n                    ${n}\n\n`:`Estudiante: ${e.nombre} (ID: ${e.id})\n                    Edad: ${e.edad}\n                    Dirección: ${e.direccion.toString()}\n                    Promedio General del Estudiante: ${t.toFixed(2)}\n                    Asignaturas: \n                    ${n}\n\n`})),a}};function o(){let a=prompt("Elije sobre que objeto quieres operar:\n            1- Añadir\n            2- Eliminar\n            3- Buscar\n            4- Calcular Promedio\n            5- Generar Reporte\n            6- Salir\n    ");return parseInt(a)}function s(){let a=prompt("Elije que operación quieres realizar:\n        1- Añadir Estudiante\n        2- Añadir Estudiante Graduado\n        3- Matricular Asignatura\n        4- Agregar Calificación\n        5- Atrás\n    ");return!!/^\d+$/.test(a)&&parseInt(a)}function c(){let a=prompt("Elije que operación quieres realizar:\n        1- Eliminar Estudiante\n        2- Desmatricular Asignatura\n        3- Eliminar Calificación\n        4- Atrás\n    ");return!!/^\d+$/.test(a)&&parseInt(a)}function l(){let a=prompt("Elije que operación quieres realizar:\n        1- Buscar Estudiante\n        2- Buscar Estudiante Graduado\n        3- Buscar Asignatura\n        4- Atrás\n    ");return!!/^\d+$/.test(a)&&parseInt(a)}function d(){let a=prompt("Elije que operación quieres realizar:\n        1- Calcular Promedio x Estudiante\n        2- Calcular Promedio x Asignatura\n        3- Calcular Promedio General\n        4- Atrás\n    ");return!!/^\d+$/.test(a)&&parseInt(a)}!function(){const a=new i,e=/^\d+$/,u=new t("Fran Aguilera",20,new n("Calle Falsa 1",123,1,"28001","Madrid","Madrid")),g=new t("Raúl Pacheco",22,new n("Calle Falsa 2",456,2,"08002","Córdoba","Córdoba")),m=new t("Álvaro Rodríguez",21,new n("Calle Falsa 3",789,3,"50003","Granada","Granada")),p=new t("Alberto Pacheco",25,new n("Calle Falsa 4",839,5,"14970","Córdoba","Iznajar"));try{u.matricularAsignatura("Matemáticas"),u.matricularAsignatura("Historia"),u.matricularAsignatura("Física"),u.matricularAsignatura("Inglés"),g.matricularAsignatura("Matemáticas"),g.matricularAsignatura("Historia"),g.matricularAsignatura("Física"),g.matricularAsignatura("Inglés"),m.matricularAsignatura("Matemáticas"),m.matricularAsignatura("Historia"),m.matricularAsignatura("Física"),m.matricularAsignatura("Inglés")}catch(a){console.error("Error al matricular a los estudiantes: ",a)}try{u.asignaturas.find((a=>"Matemáticas"===a.nombre)).agregarCalificacion(u.id,8.5),u.asignaturas.find((a=>"Historia"===a.nombre)).agregarCalificacion(u.id,7.2),u.asignaturas.find((a=>"Física"===a.nombre)).agregarCalificacion(u.id,9),u.asignaturas.find((a=>"Inglés"===a.nombre)).agregarCalificacion(u.id,6.8),g.asignaturas.find((a=>"Matemáticas"===a.nombre)).agregarCalificacion(g.id,9.3),g.asignaturas.find((a=>"Historia"===a.nombre)).agregarCalificacion(g.id,8.1),g.asignaturas.find((a=>"Física"===a.nombre)).agregarCalificacion(g.id,7.8),g.asignaturas.find((a=>"Inglés"===a.nombre)).agregarCalificacion(g.id,8.5),m.asignaturas.find((a=>"Matemáticas"===a.nombre)).agregarCalificacion(m.id,7),m.asignaturas.find((a=>"Historia"===a.nombre)).agregarCalificacion(m.id,6.5),m.asignaturas.find((a=>"Física"===a.nombre)).agregarCalificacion(m.id,8.3),m.asignaturas.find((a=>"Inglés"===a.nombre)).agregarCalificacion(m.id,7.8)}catch(a){console.error("Error al asignar calificaciones: ",a)}try{a.agregarEstudiante(u),a.agregarEstudiante(g),a.agregarEstudiante(m),a.agregarEstudiante(p)}catch(a){console.error("Error al agregar estudiantes a la lista: ",a)}let h=!1;for(;!h;)try{const i=o();if(!e.test(i)){console.log("Por favor, introduce una opción válida.");continue}switch(i){case 1:let e=s();for(;5!==e;){try{switch(e){case 1:const e=prompt("Introduce el nombre del estudiante:"),i=parseInt(prompt("Introduce la edad del estudiante:")),o=new n(prompt("Introduce la calle:"),parseInt(prompt("Introduce el número:")),prompt("Introduce el piso:"),prompt("Introduce el código postal:"),prompt("Introduce la provincia:"),prompt("Introduce la localidad:")),s=new t(e,i,o);a.agregarEstudiante(s),console.log("Estudiante añadido correctamente.");break;case 2:const c=prompt("Introduce el nombre del estudiante graduado:"),l=parseInt(prompt("Introduce la edad del estudiante graduado:")),d=new n(prompt("Introduce la calle:"),parseInt(prompt("Introduce el número:")),prompt("Introduce el piso:"),prompt("Introduce el código postal:"),prompt("Introduce la provincia:"),prompt("Introduce la localidad:")),u=new Date(prompt("Introduce la fecha de graduación (yyyy-mm-dd):")),g=prompt("Introduce el título obtenido:"),m=new r(c,l,d,u,g);a.agregarEstudiante(m),console.log("Estudiante graduado añadido correctamente.");break;case 3:const p=parseInt(prompt("Introduce el ID del estudiante:")),h=a.buscarEstudiantePorID(p);if(!h){console.log("Estudiante no encontrado.");break}const f=prompt("Introduce el nombre de la asignatura:");h.matricularAsignatura(f),console.log("Asignatura matriculada correctamente.");break;case 4:const b=parseInt(prompt("Introduce el ID del estudiante:")),E=a.buscarEstudiantePorID(b);if(!E){console.log("Estudiante no encontrado.");break}const I=prompt("Introduce el nombre de la asignatura:"),$=E.asignaturas.find((a=>a.nombre===I));if(!$){console.log("Asignatura no encontrada.");break}const w=parseFloat(prompt("Introduce la calificación (0 a 10):"));if(isNaN(w)||w<0||w>10){console.log("La calificación debe estar entre 0 y 10.");break}$.agregarCalificacion(E.id,w),console.log("Calificación añadida correctamente.");break;default:console.log("Opción no válida.")}}catch(a){console.error("Error al añadir estudiante: ",a)}e=s()}break;case 2:let i=c();for(;4!==i;){try{switch(i){case 1:const e=parseInt(prompt("Introduce el ID del estudiante a eliminar:"));if(!a.buscarEstudiantePorID(e)){console.log("No existe ningún estudiante con el ID introducido");break}a.eliminarEstudiante(e),console.log("Estudiante eliminado correctamente.");break;case 2:const t=parseInt(prompt("Introduce el ID del estudiante:")),r=a.buscarEstudiantePorID(t);if(!r){console.log("Estudiante no encontrado.");break}const n=prompt("Introduce el nombre de la asignatura:");r.desmatricularAsignatura(n),console.log("Asignatura desmatriculada correctamente.");break;case 3:const i=parseInt(prompt("Introduce el ID del estudiante:")),o=a.buscarEstudiantePorID(i);if(!o){console.log("Estudiante no encontrado.");break}const s=prompt("Introduce el nombre de la asignatura:"),c=o.asignaturas.find((a=>a.nombre===s));if(!c){console.log("Asignatura no encontrada.");break}c.eliminarCalificacion(o.id),console.log("Calificaciones eliminadas correctamente.");break;default:console.log("Opción no válida.")}}catch(a){console.error("Error al eliminar o desmatricular: ",a)}i=c()}break;case 3:let o=l();for(;4!==o;){try{switch(o){case 1:const e=prompt("Introduce el patrón de búsqueda para el estudiante:"),t=a.buscarEstudiante(e);0===t.length?console.log("Estudiante no encontrado"):console.log(t.map((a=>`ID: ${a.id}, Nombre: ${a.nombre}`)).join("\n"));break;case 2:const n=prompt("Introduce el patrón de búsqueda para el estudiante graduado:"),i=a.estudiantes.filter((a=>a instanceof r&&a.nombre.includes(n)));0===i.length?console.log("No se encontraron estudiantes graduados que coincidan con el patrón."):console.log("Estudiantes Graduados Encontrados:\n"+i.map((a=>a.toString())).join("\n\n"));break;case 3:const o=parseInt(prompt("Introduce el ID del estudiante:")),s=a.buscarEstudiantePorID(o);if(!s){console.log("Estudiante no encontrado.");break}const c=prompt("Introduce el patrón de búsqueda para la asignatura:"),l=s.buscarAsignatura(c);0===l.length?console.log("No se encontraron asignaturas que coincidan con el patrón."):console.log("Asignaturas encontradas:\n"+l.map((a=>a.nombre)).join("\n"));break;default:console.log("Opción no válida.")}}catch(a){console.error("Error al buscar estudiantes o asignaturas: ",a)}o=l()}break;case 4:let u=d();for(;4!==u;){try{switch(u){case 1:const e=parseInt(prompt("Introduce el ID del estudiante:")),t=a.buscarEstudiantePorID(e);if(!t){console.log("Estudiante no encontrado.");break}try{const a=t.calcularPromedio();console.log(`Promedio del estudiante ${t.nombre}: ${a.toFixed(2)}`)}catch(a){console.error(`Error al calcular el promedio: ${a.message}`)}break;case 2:const r=prompt("Introduce el nombre de la asignatura:"),n=a.estudiantes.flatMap((a=>a.asignaturas)).find((a=>a.nombre===r));if(!n){console.log("Asignatura no encontrada.");break}console.log(`Promedio de la asignatura: ${n.calcularPromedio().toFixed(2)}`);break;case 3:const i=a.calcularPromedioGeneral();null===i?console.log("No hay estudiantes en la lista para calcular el promedio general."):console.log(`Promedio general: ${i.toFixed(2)}`);break;default:console.log("Opción no válida.")}}catch(a){console.error("Error al calcular el promedio: ",a)}u=d()}break;case 5:try{const e=a.generarReporte();console.log(e)}catch(a){console.error("Error generar reporte: ",a)}break;case 6:h=!0,console.log("Saliendo...");break;default:console.log("Opción no válida.")}}catch(a){console.error("Error en la opción seleccionada: ",a)}}()})();