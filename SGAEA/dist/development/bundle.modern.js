/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Asignatura.js":
/*!***************************!*\
  !*** ./src/Asignatura.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Clase Asignatura\r\n * \r\n *\r\n * Atributos:\r\n *  - nombre: El nombre de la asignatura.\r\n *  - calificaciones: Un objeto que almacena las calificaciones de los estudiantes, donde la clave es el ID del estudiante\r\n *                    y el valor es una lista con las calificaciones del estudiante.\r\n */\r\nclass Asignatura {\r\n    #nombre;\r\n    #calificaciones;\r\n\r\n    constructor(nombre) {\r\n        this.#nombre = (nombre.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ IVXLCDMivxlcdm]+$/)) ? nombre : \"Asignatura\";\r\n        this.#calificaciones = {}; // Objeto {idEstudiante: [calificaciones]}.\r\n    }\r\n\r\n    get nombre() {\r\n        return this.#nombre;\r\n    }\r\n    get calificaciones() {\r\n        return this.#calificaciones;\r\n    }\r\n\r\n    set nombre(nuevoNombre) {\r\n        let expNombre = new RegExp(/^[A-Za-z0-9IVXLCDM\\s]+$/);\r\n        if (!expNombre.test(nuevoNombre)) {\r\n            throw new Error(\"El nombre de la asignatura solo puede contener letras, números romanos y espacios.\");\r\n        }\r\n        this.#nombre = nuevoNombre.trim();\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio de todas las calificaciones de la asignatura.\r\n     * \r\n     * @returns {number} El promedio de las calificaciones, o 0 si no hay calificaciones.\r\n     */\r\n    calcularPromedio() {\r\n        // Obtiene todas las calificaciones de los estudiantes\r\n        const todasLasCalificaciones = Object.values(this.#calificaciones).flat();\r\n\r\n        // Si no hay calificaciones, retorna 0\r\n        if (todasLasCalificaciones.length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Suma todas las calificaciones y calcula el promedio\r\n        const suma = todasLasCalificaciones.reduce((total, calificacion) => total + calificacion, 0);\r\n        return suma / todasLasCalificaciones.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * Agrega una calificación para un estudiante en la asignatura.\r\n     * \r\n     * @param {number} idEstudiante - El ID del estudiante al que se le asignará la calificación.\r\n     * @param {number} calificacion - La calificación a agregar (debe estar entre 0 y 10).\r\n     * @throws {Error} Si la calificación no está en el rango de 0 a 10.\r\n     */\r\n    agregarCalificacion(idEstudiante, calificacion) {\r\n        if (calificacion < 0 || calificacion > 10) {\r\n            throw new Error(\"La calificación debe estar entre 0 y 10.\");\r\n        }\r\n        if (!this.#calificaciones[idEstudiante]) {\r\n            this.#calificaciones[idEstudiante] = []; // Inicializa el array de calificaciones si no existe\r\n        }\r\n        this.#calificaciones[idEstudiante].push(calificacion);\r\n    }\r\n\r\n    /**\r\n     * Elimina todas las calificaciones asociadas a un estudiante en la asignatura.\r\n     * \r\n     * @param {number} idEstudiante - El ID del estudiante cuyas calificaciones se eliminarán.\r\n     * @throws {Error} Si no existen calificaciones registradas para el estudiante especificado.\r\n     */\r\n    eliminarCalificacion(idEstudiante) {\r\n        if (!this.#calificaciones[idEstudiante]) {\r\n            throw new Error(`No hay calificaciones registradas para el estudiante con ID ${idEstudiante}.`);\r\n        }\r\n        delete this.#calificaciones[idEstudiante];\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Asignatura);\r\n\n\n//# sourceURL=webpack://sgaea/./src/Asignatura.js?");

/***/ }),

/***/ "./src/Direccion.js":
/*!**************************!*\
  !*** ./src/Direccion.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Clase Direccion\r\n * \r\n * Representa la dirección de una persona, incluyendo detalles como calle,\r\n * número, piso, código postal, provincia y localidad.\r\n * \r\n * Atributos:\r\n *  - calle: Nombre de la calle.\r\n *  - numero: Número de la vivienda.\r\n *  - piso: Piso dentro del edificio (puede ser nulo si no aplica).\r\n *  - codigoPostal: Código postal (formato de 5 dígitos).\r\n *  - provincia: Provincia en la que se encuentra la dirección.\r\n *  - localidad: Localidad o ciudad de la dirección.\r\n */\r\nclass Direccion {\r\n    #calle;\r\n    #numero;\r\n    #piso;\r\n    #codigoPostal;\r\n    #provincia;\r\n    #localidad;\r\n\r\n    constructor(calle, numero, piso, codigoPostal, provincia, localidad) {\r\n        this.#calle = calle;\r\n        this.#numero = numero;\r\n        this.#piso = piso;\r\n        this.#codigoPostal = (new String(codigoPostal).match(/^[0-9]{5}$/)) ? codigoPostal : \"00000\"; // Comprueba que el código postal tenga 5 números sino le asigna \"00000\"\r\n        this.#provincia = provincia;\r\n        this.#localidad = localidad;\r\n    }\r\n\r\n    get calle() {\r\n        return this.#calle;\r\n    }\r\n\r\n    get numero() {\r\n        return this.#numero;\r\n    }\r\n\r\n    get piso() {\r\n        return this.#piso;\r\n    }\r\n\r\n    get codigoPostal() {\r\n        return this.#codigoPostal;\r\n    }\r\n\r\n    get provincia() {\r\n        return this.#provincia;\r\n    }\r\n\r\n    get localidad() {\r\n        return this.#localidad;\r\n    }\r\n\r\n    toString() {\r\n        return `Calle ${this.#calle} ${this.#numero}, Piso ${this.#piso}, ${this.#codigoPostal} - ${this.#provincia}, ${this.#localidad}`;\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Direccion);\r\n\n\n//# sourceURL=webpack://sgaea/./src/Direccion.js?");

/***/ }),

/***/ "./src/Estudiante.js":
/*!***************************!*\
  !*** ./src/Estudiante.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Asignatura_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asignatura.js */ \"./src/Asignatura.js\");\n\r\n\r\n/**\r\n * Clase Estudiante\r\n * Atributos:\r\n *  - id: Identificador único del estudiante (autogenerado).\r\n *  - nombre: Nombre del estudiante. Se valida que solo contenga letras y espacios.\r\n *  - edad: Edad del estudiante. Debe ser un número entero positivo.\r\n *  - direccion: Dirección del estudiante (puede ser cualquier tipo de dato).\r\n *  - asignaturas: Lista de asignaturas en las que está inscrito el estudiante.\r\n *  - matriculas: Registro de matriculación de asignaturas. Formato: {nombreAsignatura: {estado, fecha}}.\r\n */\r\n\r\nclass Estudiante {\r\n    static contadorID = 1; // Contador estático para generar IDs únicos.\r\n\r\n    #id;\r\n    #nombre;\r\n    #edad;\r\n    #direccion;\r\n    #asignaturas;\r\n    #matriculas;\r\n\r\n    constructor(nombre, edad, direccion) {\r\n        this.#id = Estudiante.contadorID++;\r\n        this.#nombre = (nombre != null) ? ((nombre.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ\\s]+$/)) ? nombre : \"Alumno\") : \"Alumno\";\r\n        this.#edad = (!Number.isNaN(edad) && Number.isInteger(edad) && edad > 0) ? edad : 0; // Se comprueba que que sea entero \r\n        this.#direccion = direccion;\r\n        this.#asignaturas = [];\r\n        this.#matriculas = {}; // Objeto {nombreAsignatura: {estado: \"matriculado/desmatriculado\", fecha: Date}}.\r\n    }\r\n\r\n    get id() {\r\n        return this.#id;\r\n    }\r\n\r\n    get nombre() {\r\n        return this.#nombre;\r\n    }\r\n\r\n    get edad() {\r\n        return this.#edad;\r\n    }\r\n\r\n    get asignaturas() {\r\n        return this.#asignaturas;\r\n    }\r\n\r\n    get matriculas() {\r\n        return this.#matriculas;\r\n    }\r\n\r\n    get direccion() {\r\n        return this.#direccion;\r\n    }\r\n\r\n    /**\r\n     * Matricula al estudiante en una asignatura.\r\n     * Si el estudiante ya está matriculado, lanza un error.\r\n     * Si la asignatura existe como desmatriculada, la reactiva.\r\n     * \r\n     * @param {string} nombreAsignatura - El nombre de la asignatura a matricular.\r\n     * @throws {Error} Si el estudiante ya está matriculado en la asignatura.\r\n     */\r\n    matricularAsignatura(nombreAsignatura) {\r\n        const fechaActual = new Date().toLocaleDateString('es-ES');\r\n        // Comprueba si la asignatura esta matriculada\r\n        if (!this.#matriculas[nombreAsignatura]) {\r\n            // Si no esta matriculada la añade a la lista de matrículas\r\n            this.#matriculas[nombreAsignatura] = {\r\n                estado: \"matriculado\",\r\n                fecha: fechaActual,\r\n            };\r\n\r\n            // Crear y agregar una instancia de la asignatura al estudiante\r\n            const nuevaAsignatura = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](nombreAsignatura);\r\n            this.#asignaturas.push(nuevaAsignatura);\r\n\r\n            // Inicializar calificaciones del estudiante en la nueva asignatura\r\n            nuevaAsignatura.calificaciones[this.id] = [];\r\n        } else if (this.#matriculas[nombreAsignatura].estado === \"matriculado\") {\r\n            throw new Error(`El estudiante ya está matriculado en la asignatura ${nombreAsignatura}.`);\r\n        } else {\r\n            // Si la asignatura esta en la lista, pero está en estado \"desmatriculado\" la cambia a \"matriculado\"\r\n            this.#matriculas[nombreAsignatura] = {\r\n                estado: \"matriculado\",\r\n                fecha: fechaActual,\r\n            };\r\n\r\n            // Asegurar que la asignatura está en la lista de asignaturas, si no está la añade\r\n            if (!this.#asignaturas.some(asig => asig.nombre === nombreAsignatura)) {\r\n                const nuevaAsignatura = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](nombreAsignatura);\r\n                this.#asignaturas.push(nuevaAsignatura);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Desmatricula al estudiante de una asignatura.\r\n     * Lanza un error si la asignatura no existe o ya está desmatriculada.\r\n     * \r\n     * @param {string} nombreAsignatura - El nombre de la asignatura a desmatricular.\r\n     * @throws {Error} Si el estudiante no está matriculado o ya está desmatriculado.\r\n     */\r\n    desmatricularAsignatura(nombreAsignatura) {\r\n        const fechaActual = new Date().toLocaleDateString('es-ES');\r\n        // Comprueba si la asignatura esta en la lista\r\n        if (!this.#matriculas[nombreAsignatura]) {\r\n            throw new Error(`El estudiante no está matriculado en la asignatura ${nombreAsignatura}.`);\r\n        }\r\n        // Comprueba si la asignatura ya esta desmatriculada\r\n        if (this.#matriculas[nombreAsignatura].estado === \"desmatriculado\") {\r\n            throw new Error(`El estudiante ya está desmatriculado de la asignatura ${nombreAsignatura}.`);\r\n        }\r\n        // Cambia el estado de la asignatura a desmatriculado\r\n        this.#matriculas[nombreAsignatura] = {\r\n            estado: \"desmatriculado\",\r\n            fecha: fechaActual,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio general de todas las asignaturas del estudiante.\r\n     * Lanza un error si alguna asignatura no tiene calificaciones.\r\n     * \r\n     * @returns {number} El promedio general del estudiante.\r\n     * @throws {Error} Si alguna asignatura no tiene calificaciones.\r\n     */\r\n    calcularPromedio() {\r\n        let sumaPromedios = 0;\r\n        let contadorAsignaturas = 0;\r\n\r\n        // Recorre la lista de asignaturas\r\n        for (let i = 0; i < this.#asignaturas.length; i++) {\r\n            const asignatura = this.#asignaturas[i];\r\n            const calificaciones = asignatura.calificaciones[this.id];\r\n\r\n            // Verificar si calificaciones está definido y es un array con elementos\r\n            if (Array.isArray(calificaciones) && calificaciones.length > 0) {\r\n                let sumaCalificaciones = 0;\r\n\r\n                // Sumar las calificaciones de la asignatura\r\n                for (let j = 0; j < calificaciones.length; j++) {\r\n                    sumaCalificaciones += calificaciones[j];\r\n                }\r\n\r\n                // Calcular el promedio de la asignatura\r\n                const promedioAsignatura = sumaCalificaciones / calificaciones.length;\r\n                sumaPromedios += promedioAsignatura;\r\n                contadorAsignaturas++;\r\n            }\r\n        }\r\n\r\n        // Si no se encontraron asignaturas con calificaciones, se retorna 0\r\n        if (contadorAsignaturas === 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Retornar el promedio general\r\n        return sumaPromedios / contadorAsignaturas;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Busca asignaturas que coincidan con un patrón dado.\r\n     * \r\n     * @param {string} patron - El patrón de búsqueda (expresión regular).\r\n     * @returns {Asignatura[]} Una lista con las asignaturas que coincidan.\r\n     */\r\n    buscarAsignatura(patron) {\r\n        // Crea una expresión regular insensible a mayúsculas/minúsculas.\r\n        const regex = new RegExp(patron, \"i\");\r\n        // Devuelve la asignatura que coincida con el patron recibido por parámetro\r\n        return this.#asignaturas.filter(asignatura => regex.test(asignatura.nombre));\r\n    }\r\n}\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Estudiante);\r\n\n\n//# sourceURL=webpack://sgaea/./src/Estudiante.js?");

/***/ }),

/***/ "./src/EstudianteGraduado.js":
/*!***********************************!*\
  !*** ./src/EstudianteGraduado.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./src/Estudiante.js\");\n\r\n\r\n/**\r\n * Clase EstudianteGraduado\r\n * \r\n * Representa a un estudiante que ha completado sus estudios y se ha graduado.\r\n * Extiende la clase Estudiante, añadiendo atributos y funcionalidades específicas para estudiantes graduados.\r\n * \r\n * Atributos:\r\n *  - fechaGraduacion: Fecha en que el estudiante se graduó.\r\n *  - titulo: Título obtenido por el estudiante al graduarse.\r\n */\r\nclass EstudianteGraduado extends _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    #fechaGraduacion;\r\n    #titulo;\r\n\r\n    constructor(nombre, edad, direccion, fechaGraduacion, titulo) {\r\n        super(nombre, edad, direccion); // Llama al constructor de la clase base\r\n        this.#fechaGraduacion = fechaGraduacion instanceof Date ? fechaGraduacion : new Date();\r\n        this.#titulo = titulo ? titulo : \"Sin título\";\r\n    }\r\n\r\n    get fechaGraduacion() {\r\n        return this.#fechaGraduacion;\r\n    }\r\n\r\n    get titulo() {\r\n        return this.#titulo;\r\n    }\r\n\r\n    set fechaGraduacion(fecha) {\r\n        if (!(fecha instanceof Date)) {\r\n            throw new Error(\"La fecha de graduación debe ser una instancia de Date.\");\r\n        }\r\n        this.#fechaGraduacion = fecha;\r\n    }\r\n\r\n    set titulo(nuevoTitulo) {\r\n        if (typeof nuevoTitulo !== \"string\" || nuevoTitulo.trim() === \"\") {\r\n            throw new Error(\"El título debe ser una cadena de texto no vacía.\");\r\n        }\r\n        this.#titulo = nuevoTitulo.trim();\r\n    }\r\n    \r\n    /**\r\n     * Sobrecarga del método calcularPromedio para incluir ponderación adicional.\r\n     * \r\n     * @returns {number} El promedio general del estudiante.\r\n     * @throws {Error} Si alguna asignatura no tiene calificaciones.\r\n     */\r\n    calcularPromedio() {\r\n        const promedioBase = super.calcularPromedio();\r\n        return promedioBase + 0.5; // Añadir una ponderación adicional para estudiantes graduados.\r\n    }\r\n\r\n    toString() {\r\n        return `Estudiante Graduado: ${this.nombre} (ID: ${this.id})\r\n            Edad: ${this.edad}\r\n            Dirección: ${this.direccion.toString()}\r\n            Título: ${this.#titulo}\r\n            Fecha de Graduación: ${this.#fechaGraduacion.toLocaleDateString(\"es-ES\")}`;\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EstudianteGraduado);\r\n\n\n//# sourceURL=webpack://sgaea/./src/EstudianteGraduado.js?");

/***/ }),

/***/ "./src/ListaEstudiantes.js":
/*!*********************************!*\
  !*** ./src/ListaEstudiantes.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./src/Estudiante.js\");\n/* harmony import */ var _EstudianteGraduado_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EstudianteGraduado.js */ \"./src/EstudianteGraduado.js\");\n\r\n\r\n\r\n/**\r\n * Clase ListaEstudiantes\r\n * \r\n * Representa una lista de estudiantes, ofreciendo funcionalidades para \r\n * gestionar su información, como agregar, eliminar, buscar y generar reportes.\r\n * \r\n * Atributos:\r\n *  - estudiantes: Una lista que contiene los estudiantes registrados.\r\n */\r\nclass ListaEstudiantes {\r\n    #estudiantes;\r\n\r\n    constructor() {\r\n        this.#estudiantes = [];\r\n    }\r\n\r\n    get estudiantes() {\r\n        return this.#estudiantes;\r\n    }\r\n\r\n    /**\r\n     * Agrega un estudiante a la lista si no existe otro con el mismo ID.\r\n     * \r\n     * @param {Estudiante} estudiante - El estudiante a agregar.\r\n     * @throws {Error} Si ya existe un estudiante con el mismo ID.\r\n     */\r\n    agregarEstudiante(estudiante) {\r\n        // Comprueba si existe el estudiante recibido por parámetro\r\n        if (this.#estudiantes.find(est => est.id === estudiante.id)) {\r\n            throw new Error(`El estudiante con ID ${estudiante.id} ya existe.`);\r\n        }\r\n        this.#estudiantes.push(estudiante);\r\n    }\r\n\r\n    /**\r\n     * Elimina un estudiante de la lista por su ID.\r\n     * \r\n     * @param {number} idEstudiante - El ID del estudiante a eliminar.\r\n     * @throws {Error} Si no se encuentra un estudiante con el ID especificado.\r\n     */\r\n    eliminarEstudiante(idEstudiante) {\r\n        // Si existe el estudiante cuyo id coincide con el id recibido por parámetro lo asigna a la constante estudiante\r\n        const estudiante = this.#estudiantes.find(est => est.id === idEstudiante);\r\n        if (!estudiante) {\r\n            throw new Error(`El estudiante con ID ${idEstudiante} no se encuentra en la lista.`);\r\n        }\r\n        // Se elimina el estudiante cuyo id coincide con el id recibido por parámetro\r\n        this.#estudiantes = this.#estudiantes.filter(e => e.id !== idEstudiante);\r\n    }\r\n\r\n    /**\r\n     * Busca estudiantes cuyo nombre coincida con un patrón.\r\n     * \r\n     * @param {string} patron - El patrón a buscar (expresión regular).\r\n     * @returns {Estudiante[]} Una lista de estudiantes que coinciden con el patrón.\r\n     */\r\n    buscarEstudiante(patron) {\r\n        // Crea una expresión regular insensible a mayúsculas/minúsculas.\r\n        const regex = new RegExp(patron, \"i\");\r\n        return this.#estudiantes.filter(e => regex.test(e.nombre));\r\n    }\r\n\r\n    /**\r\n     * Busca un estudiante en la lista por su ID.\r\n     * \r\n     * @param {number} id - El ID del estudiante a buscar.\r\n     * @returns {Estudiante | undefined} El estudiante encontrado o undefined si no existe.\r\n     */\r\n    buscarEstudiantePorID(id) {\r\n        return this.#estudiantes.find(estudiante => estudiante.id === id);\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio general de todos los estudiantes en la lista.\r\n     * \r\n     * @returns {number} El promedio general de la lista de estudiantes.\r\n     * @throws {Error} Si no hay estudiantes en la lista.\r\n     */\r\n    calcularPromedioGeneral() {\r\n        // Comprueba si hay estudiantes en la lista\r\n        if (this.#estudiantes.length === 0) {\r\n            return null; // Devuelve null si no hay estudiantes\r\n        }\r\n\r\n        let sumaPromedios = 0;\r\n        // Recorre la lista de estudiantes\r\n        for (let i = 0; i < this.#estudiantes.length; i++) {\r\n            // Calcula el promedio de cada estudiante, utilizando el método de la clase Estudiante\r\n            const promedioEstudiante = this.#estudiantes[i].calcularPromedio();\r\n            // Suma el promedio del estudiante a la variable \"sumaPromedios\"\r\n            sumaPromedios += promedioEstudiante;\r\n        }\r\n        // Devuelve la división de la suma de todos los promedios entre la longitud de la lista de estudiantes\r\n        return sumaPromedios / this.#estudiantes.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * Genera un reporte detallado de todos los estudiantes en la lista.\r\n     * Incluye información adicional para estudiantes graduados.\r\n     * \r\n     * @returns {string} Un reporte en formato de texto con la información de los estudiantes.\r\n     */\r\n    generarReporte() {\r\n        let reporte = \"\";\r\n\r\n        this.#estudiantes.forEach(estudiante => {\r\n            const promedioGeneralEstudiante = estudiante.calcularPromedio();\r\n\r\n            // Reporte de asignaturas\r\n            let asignaturasReporte = \"\";\r\n            estudiante.asignaturas.forEach(asignatura => {\r\n                const promedioAsignatura = asignatura.calcularPromedio();\r\n                asignaturasReporte += `  - ${asignatura.nombre}: Promedio ${promedioAsignatura.toFixed(2)}\\n`;\r\n            });\r\n\r\n            // Si el estudiante es graduado, incluir detalles adicionales\r\n            if (estudiante instanceof _EstudianteGraduado_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n                reporte += `Estudiante Graduado: ${estudiante.nombre} (ID: ${estudiante.id})\r\n                    Edad: ${estudiante.edad}\r\n                    Dirección: ${estudiante.direccion.toString()}\r\n                    Título: ${estudiante.titulo}\r\n                    Fecha de Graduación: ${estudiante.fechaGraduacion.toLocaleDateString(\"es-ES\")}\r\n                    Promedio General del Estudiante: ${promedioGeneralEstudiante.toFixed(2)}\r\n                    Asignaturas: \r\n                    ${asignaturasReporte}\\n\\n`;\r\n            } else {\r\n                // Reporte estándar para estudiantes regulares\r\n                reporte += `Estudiante: ${estudiante.nombre} (ID: ${estudiante.id})\r\n                    Edad: ${estudiante.edad}\r\n                    Dirección: ${estudiante.direccion.toString()}\r\n                    Promedio General del Estudiante: ${promedioGeneralEstudiante.toFixed(2)}\r\n                    Asignaturas: \r\n                    ${asignaturasReporte}\\n\\n`;\r\n            }\r\n        });\r\n\r\n        return reporte;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ListaEstudiantes);\r\n\n\n//# sourceURL=webpack://sgaea/./src/ListaEstudiantes.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./src/Estudiante.js\");\n/* harmony import */ var _EstudianteGraduado_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EstudianteGraduado.js */ \"./src/EstudianteGraduado.js\");\n/* harmony import */ var _Direccion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Direccion.js */ \"./src/Direccion.js\");\n/* harmony import */ var _ListaEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListaEstudiantes.js */ \"./src/ListaEstudiantes.js\");\n/* harmony import */ var _menu_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu.js */ \"./src/menu.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nfunction main() {\r\n    const listaEstudiantes = new _ListaEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](); // Lista principal de estudiantes.\r\n    const regexNumero = /^\\d+$/; // Validar entrada numérica.\r\n\r\n    // Crear estudiantes con una dirección completa\r\n    const estudiante1 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Fran Aguilera\", 20, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"Calle Falsa 1\", 123, 1, \"28001\", \"Madrid\", \"Madrid\"));\r\n    const estudiante2 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Raúl Pacheco\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"Calle Falsa 2\", 456, 2, \"08002\", \"Córdoba\", \"Córdoba\"));\r\n    const estudiante3 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Álvaro Rodríguez\", 21, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"Calle Falsa 3\", 789, 3, \"50003\", \"Granada\", \"Granada\"));\r\n    const estudianteGraduado1 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Alberto Pacheco\", 25, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"Calle Falsa 4\", 839, 5, \"14970\", \"Córdoba\", \"Iznajar\"));\r\n\r\n    // Matricular a los estudiantes en las asignaturas correspondientes\r\n    try {\r\n        estudiante1.matricularAsignatura(\"Matemáticas\");\r\n        estudiante1.matricularAsignatura(\"Historia\");\r\n        estudiante1.matricularAsignatura(\"Física\");\r\n        estudiante1.matricularAsignatura(\"Inglés\");\r\n\r\n        estudiante2.matricularAsignatura(\"Matemáticas\");\r\n        estudiante2.matricularAsignatura(\"Historia\");\r\n        estudiante2.matricularAsignatura(\"Física\");\r\n        estudiante2.matricularAsignatura(\"Inglés\");\r\n\r\n        estudiante3.matricularAsignatura(\"Matemáticas\");\r\n        estudiante3.matricularAsignatura(\"Historia\");\r\n        estudiante3.matricularAsignatura(\"Física\");\r\n        estudiante3.matricularAsignatura(\"Inglés\");\r\n    } catch (error) {\r\n        console.error(\"Error al matricular a los estudiantes: \", error);\r\n    }\r\n\r\n    // Asignar calificaciones a los estudiantes\r\n    try {\r\n        estudiante1.asignaturas.find(asignatura => asignatura.nombre === \"Matemáticas\").agregarCalificacion(estudiante1.id, 8.5);\r\n        estudiante1.asignaturas.find(asignatura => asignatura.nombre === \"Historia\").agregarCalificacion(estudiante1.id, 7.2);\r\n        estudiante1.asignaturas.find(asignatura => asignatura.nombre === \"Física\").agregarCalificacion(estudiante1.id, 9.0);\r\n        estudiante1.asignaturas.find(asignatura => asignatura.nombre === \"Inglés\").agregarCalificacion(estudiante1.id, 6.8);\r\n\r\n        estudiante2.asignaturas.find(asignatura => asignatura.nombre === \"Matemáticas\").agregarCalificacion(estudiante2.id, 9.3);\r\n        estudiante2.asignaturas.find(asignatura => asignatura.nombre === \"Historia\").agregarCalificacion(estudiante2.id, 8.1);\r\n        estudiante2.asignaturas.find(asignatura => asignatura.nombre === \"Física\").agregarCalificacion(estudiante2.id, 7.8);\r\n        estudiante2.asignaturas.find(asignatura => asignatura.nombre === \"Inglés\").agregarCalificacion(estudiante2.id, 8.5);\r\n\r\n        estudiante3.asignaturas.find(asignatura => asignatura.nombre === \"Matemáticas\").agregarCalificacion(estudiante3.id, 7.0);\r\n        estudiante3.asignaturas.find(asignatura => asignatura.nombre === \"Historia\").agregarCalificacion(estudiante3.id, 6.5);\r\n        estudiante3.asignaturas.find(asignatura => asignatura.nombre === \"Física\").agregarCalificacion(estudiante3.id, 8.3);\r\n        estudiante3.asignaturas.find(asignatura => asignatura.nombre === \"Inglés\").agregarCalificacion(estudiante3.id, 7.8);\r\n    } catch (error) {\r\n        console.error(\"Error al asignar calificaciones: \", error);\r\n    }\r\n\r\n    // Agregar los estudiantes a la lista\r\n    try {\r\n        listaEstudiantes.agregarEstudiante(estudiante1);\r\n        listaEstudiantes.agregarEstudiante(estudiante2);\r\n        listaEstudiantes.agregarEstudiante(estudiante3);\r\n        listaEstudiantes.agregarEstudiante(estudianteGraduado1); \r\n    } catch (error) {\r\n        console.error(\"Error al agregar estudiantes a la lista: \", error);\r\n    }\r\n\r\n    let salir = false;\r\n\r\n    while (!salir) {\r\n        try {\r\n            const opcionPrincipal = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuPrincipal)();\r\n\r\n            if (!regexNumero.test(opcionPrincipal)) {\r\n                console.log(\"Por favor, introduce una opción válida.\");\r\n                continue;\r\n            }\r\n\r\n            switch (opcionPrincipal) {\r\n                case 1: // Añadir\r\n                    let opcionAñadir = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__[\"mostrarMenuAñadir\"])();\r\n                    while (opcionAñadir !== 5) {\r\n                        try {\r\n                            switch (opcionAñadir) {\r\n                                case 1: // Añadir Estudiante\r\n                                    const nombre = prompt(\"Introduce el nombre del estudiante:\");\r\n                                    const edad = parseInt(prompt(\"Introduce la edad del estudiante:\"));\r\n                                    const direccion = new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n                                        prompt(\"Introduce la calle:\"),\r\n                                        parseInt(prompt(\"Introduce el número:\")),\r\n                                        prompt(\"Introduce el piso:\"),\r\n                                        prompt(\"Introduce el código postal:\"),\r\n                                        prompt(\"Introduce la provincia:\"),\r\n                                        prompt(\"Introduce la localidad:\")\r\n                                    );\r\n\r\n                                    const nuevoEstudiante = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](nombre, edad, direccion);\r\n\r\n                                    listaEstudiantes.agregarEstudiante(nuevoEstudiante);\r\n                                    console.log(\"Estudiante añadido correctamente.\");\r\n                                    break;\r\n\r\n                                case 2: // Añadir Estudiante Graduado\r\n                                    const nombreGraduado = prompt(\"Introduce el nombre del estudiante graduado:\");\r\n                                    const edadGraduado = parseInt(prompt(\"Introduce la edad del estudiante graduado:\"));\r\n                                    const direccionGraduado = new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n                                        prompt(\"Introduce la calle:\"),\r\n                                        parseInt(prompt(\"Introduce el número:\")),\r\n                                        prompt(\"Introduce el piso:\"),\r\n                                        prompt(\"Introduce el código postal:\"),\r\n                                        prompt(\"Introduce la provincia:\"),\r\n                                        prompt(\"Introduce la localidad:\")\r\n                                    );\r\n\r\n                                    const fechaGraduacion = new Date(prompt(\"Introduce la fecha de graduación (yyyy-mm-dd):\"));\r\n                                    const titulo = prompt(\"Introduce el título obtenido:\");\r\n\r\n                                    const nuevoEstudianteGraduado = new _EstudianteGraduado_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\r\n                                        nombreGraduado,\r\n                                        edadGraduado,\r\n                                        direccionGraduado,\r\n                                        fechaGraduacion,\r\n                                        titulo\r\n                                    );\r\n                                    listaEstudiantes.agregarEstudiante(nuevoEstudianteGraduado);\r\n                                    console.log(\"Estudiante graduado añadido correctamente.\");\r\n                                    break;\r\n\r\n                                case 3: // Matricular Asignatura\r\n                                    const idEstudianteMatricular = parseInt(prompt(\"Introduce el ID del estudiante:\"));\r\n                                    const estudianteMatricular = listaEstudiantes.buscarEstudiantePorID(idEstudianteMatricular);\r\n                                    if (!estudianteMatricular) {\r\n                                        console.log(\"Estudiante no encontrado.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    const nombreAsignaturaMatricular = prompt(\"Introduce el nombre de la asignatura:\");\r\n                                    estudianteMatricular.matricularAsignatura(nombreAsignaturaMatricular);\r\n                                    console.log(\"Asignatura matriculada correctamente.\");\r\n                                    break;\r\n\r\n                                case 4: // Añadir Calificación\r\n                                    const idEstudianteCalificar = parseInt(prompt(\"Introduce el ID del estudiante:\"));\r\n                                    const estudianteCalificar = listaEstudiantes.buscarEstudiantePorID(idEstudianteCalificar);\r\n                                    if (!estudianteCalificar) {\r\n                                        console.log(\"Estudiante no encontrado.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    const nombreAsignaturaCalificar = prompt(\"Introduce el nombre de la asignatura:\");\r\n                                    const asignaturaCalificar = estudianteCalificar.asignaturas.find(asig => asig.nombre === nombreAsignaturaCalificar);\r\n                                    if (!asignaturaCalificar) {\r\n                                        console.log(\"Asignatura no encontrada.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    const calificacion = parseFloat(prompt(\"Introduce la calificación (0 a 10):\"));\r\n                                    if (isNaN(calificacion) || calificacion < 0 || calificacion > 10) {\r\n                                        console.log(\"La calificación debe estar entre 0 y 10.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    asignaturaCalificar.agregarCalificacion(estudianteCalificar.id, calificacion);\r\n                                    console.log(\"Calificación añadida correctamente.\");\r\n                                    break;\r\n\r\n                                default:\r\n                                    console.log(\"Opción no válida.\");\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(\"Error al añadir estudiante: \", error);\r\n                        }\r\n                        opcionAñadir = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__[\"mostrarMenuAñadir\"])();\r\n                    }\r\n                    break;\r\n\r\n                case 2: // Eliminar\r\n                    let opcionEliminar = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuEliminar)();\r\n                    while (opcionEliminar !== 4) {\r\n                        try {\r\n                            switch (opcionEliminar) {\r\n                                case 1: // Eliminar Estudiante\r\n                                    const idEstudianteEliminar = parseInt(prompt(\"Introduce el ID del estudiante a eliminar:\"));\r\n                                    const estudianteEliminar = listaEstudiantes.buscarEstudiantePorID(idEstudianteEliminar);\r\n                                    if (!estudianteEliminar) {\r\n                                        console.log(\"No existe ningún estudiante con el ID introducido\");\r\n                                        break;\r\n                                    }\r\n                                    listaEstudiantes.eliminarEstudiante(idEstudianteEliminar);\r\n                                    console.log(\"Estudiante eliminado correctamente.\");\r\n                                    break;\r\n\r\n                                case 2: // Desmatricular Asignatura\r\n                                    const idEstudianteDesmatricular = parseInt(prompt(\"Introduce el ID del estudiante:\"));\r\n                                    const estudianteDesmatricular = listaEstudiantes.buscarEstudiantePorID(idEstudianteDesmatricular);\r\n                                    if (!estudianteDesmatricular) {\r\n                                        console.log(\"Estudiante no encontrado.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    const nombreAsignaturaDesmatricular = prompt(\"Introduce el nombre de la asignatura:\");\r\n                                    estudianteDesmatricular.desmatricularAsignatura(nombreAsignaturaDesmatricular);\r\n                                    console.log(\"Asignatura desmatriculada correctamente.\");\r\n                                    break;\r\n\r\n                                case 3: // Eliminar Calificación\r\n                                    const idEstudianteEliminarCalif = parseInt(prompt(\"Introduce el ID del estudiante:\"));\r\n                                    const estudianteEliminarCalif = listaEstudiantes.buscarEstudiantePorID(idEstudianteEliminarCalif);\r\n                                    if (!estudianteEliminarCalif) {\r\n                                        console.log(\"Estudiante no encontrado.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    const nombreAsignaturaEliminarCalif = prompt(\"Introduce el nombre de la asignatura:\");\r\n                                    const asignaturaEliminarCalif = estudianteEliminarCalif.asignaturas.find(asig => asig.nombre === nombreAsignaturaEliminarCalif);\r\n                                    if (!asignaturaEliminarCalif) {\r\n                                        console.log(\"Asignatura no encontrada.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    asignaturaEliminarCalif.eliminarCalificacion(estudianteEliminarCalif.id);\r\n                                    console.log(\"Calificaciones eliminadas correctamente.\");\r\n                                    break;\r\n\r\n                                default:\r\n                                    console.log(\"Opción no válida.\");\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(\"Error al eliminar o desmatricular: \", error);\r\n                        }\r\n                        opcionEliminar = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuEliminar)();\r\n                    }\r\n                    break;\r\n\r\n                case 3: // Buscar\r\n                    let opcionBuscar = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuBuscar)();\r\n                    while (opcionBuscar !== 4) {\r\n                        try {\r\n                            switch (opcionBuscar) {\r\n                                case 1: // Buscar Estudiante\r\n                                    const patronEstudiante = prompt(\"Introduce el patrón de búsqueda para el estudiante:\");\r\n                                    const resultadosEstudiantes = listaEstudiantes.buscarEstudiante(patronEstudiante);\r\n\r\n                                    if (resultadosEstudiantes.length === 0) {\r\n                                        console.log(\"Estudiante no encontrado\");\r\n                                    } else {\r\n                                        console.log(resultadosEstudiantes.map(est => `ID: ${est.id}, Nombre: ${est.nombre}`).join(\"\\n\"));\r\n                                    }\r\n                                    break;\r\n\r\n                                case 2: // Buscar Estudiante Graduado\r\n                                    const patronGraduado = prompt(\"Introduce el patrón de búsqueda para el estudiante graduado:\");\r\n                                    const resultadosGraduados = listaEstudiantes.estudiantes\r\n                                        .filter(est => est instanceof _EstudianteGraduado_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] && est.nombre.includes(patronGraduado));\r\n                                    if (resultadosGraduados.length === 0) {\r\n                                        console.log(\"No se encontraron estudiantes graduados que coincidan con el patrón.\");\r\n                                    } else {\r\n                                        console.log(\"Estudiantes Graduados Encontrados:\\n\" +\r\n                                            resultadosGraduados.map(est => est.toString()).join(\"\\n\\n\"));\r\n                                    }\r\n                                    break;\r\n\r\n                                case 3: // Buscar Asignatura\r\n                                    const idEstudianteBuscarAsig = parseInt(prompt(\"Introduce el ID del estudiante:\"));\r\n                                    const estudianteBuscarAsig = listaEstudiantes.buscarEstudiantePorID(idEstudianteBuscarAsig);\r\n                                    if (!estudianteBuscarAsig) {\r\n                                        console.log(\"Estudiante no encontrado.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    const patronAsignatura = prompt(\"Introduce el patrón de búsqueda para la asignatura:\");\r\n                                    const resultadosAsignaturas = estudianteBuscarAsig.buscarAsignatura(patronAsignatura);\r\n                                    if (resultadosAsignaturas.length === 0) {\r\n                                        console.log(\"No se encontraron asignaturas que coincidan con el patrón.\");\r\n                                    } else {\r\n                                        console.log(\"Asignaturas encontradas:\\n\" + resultadosAsignaturas.map(asig => asig.nombre).join(\"\\n\"));\r\n                                    }\r\n                                    break;\r\n\r\n                                default:\r\n                                    console.log(\"Opción no válida.\");\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(\"Error al buscar estudiantes o asignaturas: \", error);\r\n                        }\r\n                        opcionBuscar = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuBuscar)();\r\n                    }\r\n                    break;\r\n\r\n                case 4: // Calcular Promedio\r\n                    let opcionCalcular = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuCalcular)();\r\n                    while (opcionCalcular !== 4) {\r\n                        try {\r\n                            switch (opcionCalcular) {\r\n                                case 1: // Promedio por Estudiante\r\n                                    const idEstudiantePromedio = parseInt(prompt(\"Introduce el ID del estudiante:\"));\r\n                                    const estudiantePromedio = listaEstudiantes.buscarEstudiantePorID(idEstudiantePromedio);\r\n\r\n                                    if (!estudiantePromedio) {\r\n                                        console.log(\"Estudiante no encontrado.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    try {\r\n                                        // Polimorfismo: se invoca calcularPromedio según el tipo de estudiante\r\n                                        const promedio = estudiantePromedio.calcularPromedio();\r\n                                        console.log(`Promedio del estudiante ${estudiantePromedio.nombre}: ${promedio.toFixed(2)}`);\r\n                                    } catch (error) {\r\n                                        console.error(`Error al calcular el promedio: ${error.message}`);\r\n                                    }\r\n                                    break;\r\n\r\n\r\n                                case 2: // Promedio por Asignatura\r\n                                    const nombreAsignaturaPromedio = prompt(\"Introduce el nombre de la asignatura:\");\r\n                                    const asignaturasPromedio = listaEstudiantes.estudiantes.flatMap(e => e.asignaturas);\r\n                                    const asignaturaPromedio = asignaturasPromedio.find(asig => asig.nombre === nombreAsignaturaPromedio);\r\n                                    if (!asignaturaPromedio) {\r\n                                        console.log(\"Asignatura no encontrada.\");\r\n                                        break;\r\n                                    }\r\n\r\n                                    console.log(`Promedio de la asignatura: ${asignaturaPromedio.calcularPromedio().toFixed(2)}`);\r\n                                    break;\r\n\r\n                                case 3: // Promedio General\r\n                                    const promedioGeneral = listaEstudiantes.calcularPromedioGeneral();\r\n                                    if (promedioGeneral === null) {\r\n                                        console.log(\"No hay estudiantes en la lista para calcular el promedio general.\");\r\n                                    } else {\r\n                                        console.log(`Promedio general: ${promedioGeneral.toFixed(2)}`);\r\n                                    }\r\n                                    break;\r\n\r\n                                default:\r\n                                    console.log(\"Opción no válida.\");\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(\"Error al calcular el promedio: \", error);\r\n                        }\r\n                        opcionCalcular = (0,_menu_js__WEBPACK_IMPORTED_MODULE_4__.mostrarMenuCalcular)();\r\n                    }\r\n                    break;\r\n\r\n                case 5: // Generar Reporte\r\n                    try {\r\n                        const reporte = listaEstudiantes.generarReporte();\r\n                        console.log(reporte);\r\n                    } catch (error) {\r\n                        console.error(\"Error generar reporte: \", error);\r\n                    }\r\n                    break;\r\n\r\n                case 6: // Salir\r\n                    salir = true;\r\n                    console.log(\"Saliendo...\");\r\n                    break;\r\n\r\n                default:\r\n                    console.log(\"Opción no válida.\");\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error en la opción seleccionada: \", error);\r\n        }\r\n    }\r\n}\r\n\r\nmain();\r\n\n\n//# sourceURL=webpack://sgaea/./src/main.js?");

/***/ }),

/***/ "./src/menu.js":
/*!*********************!*\
  !*** ./src/menu.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mostrarMenuAñadir\": () => (/* binding */ mostrarMenuAñadir),\n/* harmony export */   mostrarMenuBuscar: () => (/* binding */ mostrarMenuBuscar),\n/* harmony export */   mostrarMenuCalcular: () => (/* binding */ mostrarMenuCalcular),\n/* harmony export */   mostrarMenuEliminar: () => (/* binding */ mostrarMenuEliminar),\n/* harmony export */   mostrarMenuPrincipal: () => (/* binding */ mostrarMenuPrincipal)\n/* harmony export */ });\nfunction mostrarMenuPrincipal() {\r\n    let regex = /^\\d+$/;\r\n    let opcion = prompt(`Elije sobre que objeto quieres operar:\r\n            1- Añadir\r\n            2- Eliminar\r\n            3- Buscar\r\n            4- Calcular Promedio\r\n            5- Generar Reporte\r\n            6- Salir\r\n    `);\r\n\r\n    return parseInt(opcion);\r\n}\r\n\r\nfunction mostrarMenuAñadir() {\r\n    let regex = /^\\d+$/;\r\n    let opcion = prompt(`Elije que operación quieres realizar:\r\n        1- Añadir Estudiante\r\n        2- Añadir Estudiante Graduado\r\n        3- Matricular Asignatura\r\n        4- Agregar Calificación\r\n        5- Atrás\r\n    `);\r\n    if (regex.test(opcion)) {\r\n        return parseInt(opcion);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction mostrarMenuEliminar() {\r\n    let regex = /^\\d+$/;\r\n    let opcion = prompt(`Elije que operación quieres realizar:\r\n        1- Eliminar Estudiante\r\n        2- Desmatricular Asignatura\r\n        3- Eliminar Calificación\r\n        4- Atrás\r\n    `);\r\n    if (regex.test(opcion)) {\r\n        return parseInt(opcion);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction mostrarMenuBuscar() {\r\n    let regex = /^\\d+$/;\r\n    let opcion = prompt(`Elije que operación quieres realizar:\r\n        1- Buscar Estudiante\r\n        2- Buscar Estudiante Graduado\r\n        3- Buscar Asignatura\r\n        4- Atrás\r\n    `);\r\n    if (regex.test(opcion)) {\r\n        return parseInt(opcion);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction mostrarMenuCalcular() {\r\n    let regex = /^\\d+$/;\r\n    let opcion = prompt(`Elije que operación quieres realizar:\r\n        1- Calcular Promedio x Estudiante\r\n        2- Calcular Promedio x Asignatura\r\n        3- Calcular Promedio General\r\n        4- Atrás\r\n    `);\r\n    if (regex.test(opcion)) {\r\n        return parseInt(opcion);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://sgaea/./src/menu.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;